from Crypto.Util.number import long_to_bytes, inverse, getPrime
from sympy import mod_inverse

# m = bytes_to_long(FLAG)
# n = math.prod([getPrime(1024) for _ in range(2**0)])
# e = 0x10001
# c = pow(m, e, n)

n = 144595784022187052238125262458232959109987136704231245881870735843030914418780422519197073054193003090872912033596512666042758783502695953159051463566278382720140120749528617388336646147072604310690631290350467553484062369903150007357049541933018919332888376075574412714397536728967816658337874664379646535347
e = 65537
c = 15114190905253542247495696649766224943647565245575793033722173362381895081574269185793855569028304967185492350704248662115269163914175084627211079781200695659317523835901228170250632843476020488370822347715086086989906717932813405479321939826364601353394090531331666739056025477042690259429336665430591623215

# normally, n should be factorized to find p and q
# then we find d using e mod ((p-1)(q-1))

# but since n was not generated correctly, we can skip finding p and q

d = mod_inverse(e, n-1)
print('d:', d)

original = pow(c, d, n)
print(original)

print(long_to_bytes(original))
# HTB{0h_d4mn_4ny7h1ng_r41s3d_t0_0_1s_1!!!}

