from Crypto.Util.number import bytes_to_long, long_to_bytes, getPrime # pip3 install pycryptodome
import random

p_actual = 163096280281091423983210248406915712517889481034858950909290409636473708049935881617682030048346215988640991054059665720267702269812372029514413149200077540372286640767440712609200928109053348791072129620291461211782445376287196340880230151621619967077864403170491990385250500736122995129377670743204192511487

g_actual = 90013867415033815546788865683138787340981114779795027049849106735163065530238112558925433950669257882773719245540328122774485318132233380232659378189294454934415433502907419484904868579770055146403383222584313613545633012035801235443658074554570316320175379613006002500159040573384221472749392328180810282909

h_actual = 36126929766421201592898598390796462047092189488294899467611358820068759559145016809953567417997852926385712060056759236355651329519671229503584054092862591820977252929713375230785797177168714290835111838057125364932429350418633983021165325131930984126892231131770259051468531005183584452954169653119524751729

c1_actual = 159888401067473505158228981260048538206997685715926404215585294103028971525122709370069002987651820789915955483297339998284909198539884370216675928669717336010990834572641551913464452325312178797916891874885912285079465823124506696494765212303264868663818171793272450116611177713890102083844049242593904824396

c2_actual = 119922107693874734193003422004373653093552019951764644568950336416836757753914623024010126542723403161511430245803749782677240741425557896253881748212849840746908130439957915793292025688133503007044034712413879714604088691748282035315237472061427142978538459398404960344186573668737856258157623070654311038584

def gcd(x, y):
    while(y):
        x, y = y, x % y
    return x

# calculate modular multiplicative inverse
def mod_mul_inv(x, n):
    if gcd(x, n) != 1:
        raise Exception(f'{x} is not coprime with {n}')
    return pow(x, -1, n) 

def main():
    y = (c1_actual * mod_mul_inv(g_actual, p_actual)) % p_actual
    print('y =', y)

    # sanity check
    c1_test = (g_actual * y) % p_actual
    if c1_test != c1_actual:
        raise Exception(f'BAD CALCULATION!\ng * y != c1\ng * y = {c1_test}\nc1 = {c1_actual}')

    # calculate flag
    s = pow(h_actual, y, p_actual)
    m = (c2_actual * mod_mul_inv(s, p_actual)) % p_actual
    print('m =', m)

    m_bytes = long_to_bytes(m)
    print(m_bytes.decode())

if __name__ == '__main__':
    main()
